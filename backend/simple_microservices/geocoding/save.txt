export function loadGoogleMaps(apiKey) {
    return new Promise((resolve, reject) => {
      const script = document.createElement("script");
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;
      script.onload = () => {
        resolve();
      };
      script.onerror = () => {
        reject(new Error("Failed to load Google Maps API script"));
      };
      document.head.appendChild(script);
    });
  }
  // Set up autocomplete when the Google Maps API has loaded
  
  async function initAutocomplete(apiKey, vm) {
    await loadGoogleMaps(apiKey);
  
    const input = document.getElementById("autocomplete-input");
    const autocomplete = new google.maps.places.Autocomplete(input);
  
    // Set options for the autocomplete search box
    autocomplete.setFields(["place_id", "formatted_address"]);
    autocomplete.setTypes(["geocode"]);
  
    // Listen for changes to the input field
    autocomplete.addListener("place_changed", async () => {
      const place = autocomplete.getPlace();
  
      // Use the getPlacePredictions() function to get more autocomplete results
      const service = new google.maps.places.AutocompleteService();
      const request = {
        input: input.value,
        types: ["geocode"],
      };
      try {
        const results = await new Promise((resolve, reject) => {
          service.getPlacePredictions(request, (results, status) => {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
              resolve(results);
            } else {
              reject(status);
            }
          });
        });
        const address = results[0].description;
        vm.geocodeResult = address; // parase address information to Vue
  
      } catch (error) {
        console.error(error);
      }
    });
  }